package main

import (
	"context"
	"fmt"
	"net"
	"os"
	"text/tabwriter"
	"time"

	"github.com/docker/cli/cli-plugins/manager"
	"github.com/docker/cli/cli-plugins/plugin"
	"github.com/docker/cli/cli/command"
	clicontext "github.com/docker/cli/cli/context"
	"github.com/docker/cli/cli/context/store"
	"github.com/docker/docker/client"
	"github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

func main() {
	plugin.Run(func(dockerCli command.Cli) *cobra.Command {
		discover := &cobra.Command{
			Use:   "discover",
			Short: "Finds Docker nodes on your local network",
			RunE: func(_ *cobra.Command, _ []string) error {
				endpoints, err := endpoints()
				if err != nil {
					return err
				}
				if len(endpoints) == 0 {
					fmt.Println("No Docker node found on your local network.")
					return nil
				}

				w := tabwriter.NewWriter(os.Stdout, 0, 0, 2, ' ', 0)
				fmt.Fprintln(w, "ENDPOINT\tVERSION")
				for _, endpoint := range endpoints {
					version, err := endpoint.client.ServerVersion(context.Background())
					if err != nil {
						return err
					}
					fmt.Fprintf(w, "%s\t%s\n", endpoint.target, version.Version)
				}
				w.Flush()
				return nil
			},
		}

		use := &cobra.Command{
			Use:   "use",
			Short: "Pick a random node or set context to use a specific node",
			Args:  cobra.MaximumNArgs(1),
			RunE: func(_ *cobra.Command, args []string) error {
				endpoints, err := endpoints()
				if err != nil {
					return err
				}
				if err := dockerCli.ContextStore().CreateOrUpdate(store.Metadata{
					Name: "farm",
					Metadata: command.DockerContext{
						Description:       "Generated by docker farm",
						StackOrchestrator: command.OrchestratorSwarm,
					},
					Endpoints: map[string]interface{}{
						"docker": clicontext.EndpointMetaBase{
							Host: endpoints[0].target,
						},
					},
				}); err != nil {
					return err
				}
				dockerCli.ConfigFile().CurrentContext = "farm"
				return dockerCli.ConfigFile().Save()
			},
		}

		reset := &cobra.Command{
			Use:   "reset",
			Short: "Reset context to default",
			RunE: func(_ *cobra.Command, _ []string) error {
				dockerCli.ConfigFile().CurrentContext = ""
				return dockerCli.ConfigFile().Save()
			},
		}
		cmd := &cobra.Command{
			Use:   "farm",
			Short: "Discover Docker nodes on your local network",
			PersistentPreRunE: func(cmd *cobra.Command, args []string) error {
				return plugin.PersistentPreRunE(cmd, args)
			},
		}

		cmd.AddCommand(discover, use, reset)
		return cmd
	},
		manager.Metadata{
			SchemaVersion: "0.1.0",
			Vendor:        "Docker Inc.",
			Version:       "testing",
			Experimental:  false,
		})
}

func endpoints() ([]endpoint, error) {
	addrs, err := net.LookupHost("docker-builder")
	if err != nil {
		return nil, err
	}
	var endpoints []endpoint
	for _, addr := range addrs {
		client, _ := client.NewClientWithOpts(client.WithHost(fmt.Sprintf("tcp://%s:2375", addr)), client.WithAPIVersionNegotiation())
		ctx, cancel := context.WithDeadline(context.Background(), time.Now().Add(2*time.Second))
		defer cancel()
		if _, err := client.Ping(ctx); err == nil {
			endpoints = append(endpoints, endpoint{
				target: fmt.Sprintf("tcp://%s:2375", addr),
				client: client,
			})
		} else {
			logrus.Warnf("%s is unresponsive", addr)
		}
	}
	return endpoints, nil
}

type endpoint struct {
	target string
	client *client.Client
}
